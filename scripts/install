#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

email=$(ynh_user_get_info --username=$admin --key=mail)
upload="256M"
random_string=$(ynh_string_random --length=48)

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
#REMOVEME? ynh_print_info "Storing installation settings..."

ynh_app_setting_set --app=$app --key=email --value=$email
ynh_app_setting_set --app=$app --key=upload --value=$upload
ynh_app_setting_set --app=$app --key=random_string --value=$random_string

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

# 1 - Zap
ynh_script_progression --message="Setting up Zap source files..."

# Download, check integrity, uncompress and patch the source from app.src
git clone https://codeberg.org/zot-archive/zap.git "$install_dir" --quiet

# 2 - Zap Addons

# Make addon Directory and unpack the addons to this directory
ynh_script_progression --message="Setting up Zap addons source files..."

pushd "$install_dir"
	mkdir -p extend/addon/zaddons
	mkdir addon
	git clone  https://codeberg.org/zot-archive/zap-addons.git $install_dir/extend/addon/zaddons --quiet
	filelist=(`ls extend/addon/zaddons`)
	cd addon
	for a in "${filelist[@]}" ; do
		base=`basename $a`
		if [ $base = '.git' ]; then
			#echo 'ignoring git'
			continue;
		fi
		if [ ! -d ../extend/addon/zaddons/$base ]; then
			#echo $a 'not a directory'
			continue;
		fi
		if [ -x $base ]; then
			#echo $base 'file exists'
			continue;
		fi

		echo linking $base

		ln -s ../extend/addon/zaddons/$base $base
	done

popd



# 3 - Some extra folders
ynh_script_progression --message="Creating smarty3 folder for personal data..."

mkdir -p "${install_dir}/store"
mkdir -p  "${install_dir}/cache/smarty3"
chmod -R 775 $install_dir/store $install_dir/cache

# Copy the template install/htconfig.sample.php to .htconfig.php
config="$install_dir/.htconfig.php"
ynh_script_progression --message="Moving .htconfig.php to root of Zap ..."
cp $install_dir/install/htconfig.sample.php $config
config="$install_dir/.htconfig.php"
# Create php.log inside for logs
ynh_print_info "Create php.log for the debuging..."
touch "$install_dir/php.log"

chmod 750 "$install_dir"
chmod -R o-rwx "$install_dir"
chown -R $app:www-data "$install_dir"

#=================================================
# CREATE A  DATABASE
#=================================================

db_name=$(ynh_sanitize_dbid --db_name=$app)
db_user=$db_name
db_pwd=$(ynh_string_random --length=30)
ynh_app_setting_set --app=$app --key=db_name --value=$db_name
ynh_app_setting_set --app=$app --key=db_user --value=$db_user
ynh_app_setting_set --app=$app --key=db_pwd --value=$db_pwd

if [  $database == "mysql" ]; then
	ynh_script_progression --message="Creating a MySQL database..."
	ynh_mysql_setup_db --db_user=$db_user --db_name=$db_name
	ynh_mysql_connect_as --user="$db_name" --password="$db_pwd" --database="$db_name" < $install_dir/install/schema_mysql.sql
elif [ $database == "postgresql" ]; then
	# Create postgresql database
	ynh_script_progression --message="Creating a PostgreSQL database..."
	ynh_replace_string --match_string="db_type = 0;" --replace_string="db_type = 1;" --target_file="$config"
	ynh_psql_test_if_first_run
	ynh_psql_setup_db --db_user=$db_user --db_name=$db_name
	ynh_psql_connect_as --user="$db_name" --password="$db_pwd" --database="$db_name" < $install_dir/install/schema_postgres.sql
fi

#=================================================
# MODIFY A CONFIG FILE
#=================================================

ynh_replace_string --match_string="your.mysqlhost.com" --replace_string="localhost" --target_file="$config"
ynh_replace_string --match_string= "mysqlpassword" --replace_string="$db_pwd" --target_file="$config"
ynh_replace_string --match_string="mysqlusername" --replace_string="$db_name" --target_file="$config"
ynh_replace_string --match_string= "mysqldatabasename" --replace_string="$db_name" --target_file="$config"
ynh_replace_string --match_string= "mysite.example" --replace_string="$domain" --target_file="$config"
ynh_replace_string --match_string= "if the auto install failed, put a unique random string here" --replace_string="$random_string" --target_file="$config"
sed -i "s/\['admin_email'\] = '';/\['admin_email'\] = '$email';/g" "$config"
ynh_replace_string --match_string= "//error_reporting(E_ERROR | E_WARNING | E_PARSE );" --replace_string="error_reporting(E_ERROR | E_WARNING | E_PARSE );" --target_file="$config"
ynh_replace_string --match_string= "//ini_set('error_log','php.out');" --replace_string="ini_set('error_log','php.log');" --target_file="$config"
ynh_replace_string --match_string= "//ini_set('log_errors','1');" --replace_string="ini_set('log_errors','1');" --target_file="$config"
ynh_replace_string --match_string= "//ini_set('display_errors', '0');" --replace_string="ini_set('display_errors', '0');" --target_file="$config"
sed -i "s/\['php_path'\] = 'php';/\['php_path'\] = 'php$phpversion';/g" "$config"

# addon LDAP config
ynh_script_progression --message="Push Ldap configuration to .htconfig.php..."

cat ../conf/ldap_conf.php >> $install_dir/.htconfig.php

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring NGINX web server..."

# Create a dedicated nginx config
ynh_add_nginx_config

# Create a dedicated php-fpm config
ynh_add_fpm_config

ynh_add_config --template="poller-cron" --destination="/etc/cron.d/$app"
chown root: "/etc/cron.d/$app"
chmod 644 "/etc/cron.d/$app"

# Use logrotate to manage application logfile(s)
ynh_use_logrotate "$install_dir/php.log"

ynh_add_fail2ban_config --logpath="$install_dir/php.log" --failregex="^.*auth\.php.*failed login attempt.*from IP <HOST>.*$" --max_retry="5"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed"
